@using Microsoft.AspNetCore.Identity
@using TecBurguer.Areas.Identity.Data
@using System.Globalization // Necessário para formatar a moeda

@model IEnumerable<TecBurguer.Models.Pedido>

@inject UserManager<LoginCliente> UserManager
@inject SignInManager<LoginCliente> SignInManager

@{
    ViewData["Title"] = "Carrinho de Compras";

    // O seu controlador retorna uma LISTA de pedidos.
    // Assumimos que o "Carrinho" é o PRIMEIRO pedido dessa lista.
    // (Idealmente, o controlador filtraria pedidos com "Estado == 'Carrinho'")
    var pedido = Model.FirstOrDefault();

    // Vamos agrupar os itens do pedido para obter as quantidades corretas
    // Isso transforma a lista de associações (ex: 2x X-Bacon) em
    // um item agrupado (X-Bacon, Qtd: 2)
    List<dynamic> itemsDoCarrinho = new List<dynamic>();

    if (pedido != null)
    {
        itemsDoCarrinho = pedido.PedidoHamburgueres
        .GroupBy(ph => ph.IdHamburguerNavigation) // Agrupa pelo objeto Hamburguer
        .Select(g => new
        {
            Hamburguer = g.Key, // O objeto Hamburguer (com Nome, Preco, Imagem)
            Quantidade = g.Count(), // Conta quantas vezes ele aparece
            Subtotal = g.Key.Preco * g.Count() // Calcula o subtotal para esse grupo
        }).ToList<dynamic>();
    }
}

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="~/js/site.js"></script>

<style>
    /* Estilos simples para os botões de quantidade */
    .quantity-controls {
        display: flex;
        align-items: center;
    }

    .quantity-input {
        width: 50px;
        text-align: center;
        border: 1px solid #ccc;
        border-left: none;
        border-right: none;
        padding: 0.375rem 0.5rem;
    }

    .quantity-btn {
        border: 1px solid #ccc;
        background-color: #f8f9fa;
        color: #333;
        padding: 0.375rem 0.75rem;
    }

        .quantity-btn:hover {
            background-color: #e2e6ea;
        }

    .btn-decrease {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .btn-increase {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }

    .item-image {
        width: 100px;
        height: 100px;
        object-fit: cover;
        margin-right: 1.5rem;
    }
</style>

<div class="container my-5">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">Seu Carrinho</h1>
        </div>

        @if (pedido == null || !itemsDoCarrinho.Any())
        {
            <div class="col-12">
                <div class="alert alert-info" role="alert">
                    Seu carrinho está vazio.
                </div>
            </div>
        }
        else
        {
            <div class="col-lg-8">
                <div id="cart-items-container" class="list-group shadow-sm">
                    @foreach (var item in itemsDoCarrinho)
                    {
                        // Formatando os preços para exibição
                        var precoUnitario = item.Hamburguer.Preco.ToString("C", new CultureInfo("pt-BR"));
                        var subtotalItem = item.Subtotal.ToString("C", new CultureInfo("pt-BR"));

                        <div class="list-group-item d-flex flex-wrap align-items-center p-3">

                            <img src="@(item.Hamburguer.Imagem ?? "/images/placeholder.png")" alt="@item.Hamburguer.Nome" class="item-image rounded">

                            <div class="flex-grow-1 me-3" style="min-width: 150px;">
                                <h5 class="mb-1">@item.Hamburguer.Nome</h5>
                                <small class="text-muted">Preço Unitário: @precoUnitario</small>
                            </div>

                            <div class="quantity-controls my-2 me-3">
                                <button class="btn quantity-btn btn-decrease" data-id="@item.Hamburguer.IdHamburguer" aria-label="Diminuir quantidade">
                                    -
                                </button>
                                <span class="quantity-input">@item.Quantidade</span>
                                <button class="btn quantity-btn btn-increase" data-id="@item.Hamburguer.IdHamburguer" aria-label="Aumentar quantidade">
                                    +
                                </button>
                            </div>

                            <div class="ms-lg-auto" style="min-width: 100px;">
                                <h6 class="mb-0 text-lg-end">@subtotalItem</h6>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="col-lg-4 mt-4 mt-lg-0">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h4 class="card-title mb-4">Resumo do Pedido</h4>

                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal</span>
                            <span id="cart-subtotal">@pedido.PrecoTotal</span>
                        </div>

                        <div class="d-flex justify-content-between mb-3">
                            <span>Frete</span>
                            <span>Grátis</span>
                        </div>

                        <hr>

                        <div class="d-flex justify-content-between fw-bold fs-5 mb-4">
                            <span>Total</span>
                            <span id="cart-total">@pedido.PrecoTotal</span>
                        </div>

                        <a href="#" class="btn btn-primary w-100">Finalizar Compra</a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const cartContainer = document.getElementById("cart-items-container");

        if (cartContainer) {
            cartContainer.addEventListener("click", (event) => {
                const target = event.target;

                // Verifica se clicou no botão de aumentar
                if (target.classList.contains("btn-increase")) {
                    const hamburguerId = target.dataset.id;
                    updateCartQuantity(hamburguerId, 'increase');
                }

                // Verifica se clicou no botão de diminuir
                if (target.classList.contains("btn-decrease")) {
                    const hamburguerId = target.dataset.id;
                    updateCartQuantity(hamburguerId, 'decrease');
                }
            });
        }
    });

    /**
     * ATENÇÃO: Esta função assume que você criará os seguintes Endpoints (APIs)
     * no seu controlador para lidar com a adição e remoção de itens.
     *
     * 1. POST /api/carrinho/adicionar/{id} - Adiciona UMA unidade do hambúrguer ao pedido.
     * 2. POST /api/carrinho/remover/{id}   - Remove UMA unidade do hambúrguer do pedido.
     *
     * Essas actions devem adicionar/remover uma linha da tabela 'PedidoHamburguer'
     * e recalcular o 'PrecoTotal' do 'Pedido'.
     */
    async function updateCartQuantity(hamburguerId, action) {

        // Define a URL da API baseando-se na ação
        let url = '';
        if (action === 'increase') {
            // URL fictícia da sua API para ADICIONAR
            url = `/api/carrinho/adicionar/${hamburguerId}`;
        } else if (action === 'decrease') {
            // URL fictícia da sua API para REMOVER
            url = `/api/carrinho/remover/${hamburguerId}`;
        } else {
            return; // Ação desconhecida
        }

        try {
            // Faz a chamada POST para o seu backend
            const response = await axios.post(url);

            if (response.status === 200 || response.status === 204) {
                // SUCESSO!
                // A forma mais simples e segura de atualizar o carrinho
                // é recarregar a página. O servidor já terá os novos totais.
                location.reload();
            } else {
                alert("Houve um problema ao atualizar seu carrinho.");
            }
        } catch (error) {
            console.error("Erro ao atualizar o carrinho:", error);
            alert("Erro ao se comunicar com o servidor.");
        }
    }
</script>